{"version":3,"sources":["webpack:///./node_modules/bip39/src/index.js","webpack:///./node_modules/bip39/src/_wordlists.js"],"names":["Object","defineProperty","exports","value","createHash","pbkdf2_1","randomBytes","_wordlists_1","DEFAULT_WORDLIST","_default","INVALID_MNEMONIC","INVALID_ENTROPY","INVALID_CHECKSUM","WORDLIST_REQUIRED","lpad","str","padString","length","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","ENT","CS","hash","update","digest","slice","salt","password","mnemonicToSeedSync","mnemonic","mnemonicBuffer","Buffer","from","normalize","saltBuffer","pbkdf2Sync","mnemonicToSeed","Promise","resolve","reject","pbkdf2","err","data","error","mnemonicToEntropy","wordlist","Error","words","split","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","newChecksum","entropyToMnemonic","isBuffer","TypeError","chunks","binary","generateMnemonic","strength","rng","validateMnemonic","e","setDefaultWordlist","language","result","wordlists","getDefaultWordlist","keys","filter","lang","every","_wordlists_2","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","JA","english","EN"],"mappings":"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","file":"js/message:sign~wallet:entropy~wallet:passphrase.44283b08.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require(\"create-hash\");\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst randomBytes = require(\"randombytes\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please explicitly pass a 2048 word array explicitly.';\nfunction lpad(str, padString, length) {\n    while (str.length < length)\n        str = padString + str;\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = createHash('sha256')\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary([...hash]).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n    const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    return new Promise((resolve, reject) => {\n        try {\n            const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n            const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n            pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', (err, data) => {\n                if (err)\n                    return reject(err);\n                else\n                    return resolve(data);\n            });\n        }\n        catch (error) {\n            return reject(error);\n        }\n    });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = (mnemonic || '').normalize('NFKD').split(' ');\n    if (words.length % 3 !== 0)\n        throw new Error(INVALID_MNEMONIC);\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map(word => {\n        const index = wordlist.indexOf(word);\n        if (index === -1)\n            throw new Error(INVALID_MNEMONIC);\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length > 32)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length % 4 !== 0)\n        throw new Error(INVALID_ENTROPY);\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits)\n        throw new Error(INVALID_CHECKSUM);\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy))\n        entropy = Buffer.from(entropy, 'hex');\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length > 32)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length % 4 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    const entropyBits = bytesToBinary([...entropy]);\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map(binary => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result)\n        DEFAULT_WORDLIST = result;\n    else\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST)\n        throw new Error('No Default Wordlist set');\n    return Object.keys(_wordlists_1.wordlists).filter(lang => {\n        if (lang === 'JA' || lang === 'EN')\n            return false;\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n"],"sourceRoot":""}